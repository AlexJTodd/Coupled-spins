import sympy as sy
import numpy as np
import matplotlib.pyplot as plt

#Symbolic form
w,d,J = sy.symbols("w,d,J")

symbol_hamiltonian = sy.Matrix([[w+J/4,0,0,0],[0,d/2 - J/4,J/2,0],[0,J/2,-d/2 - J/4,0],[0,0,0,-w + J/4]])

X,D = symbol_hamiltonian.diagonalize() #Eigenvector matrix, eigenvalue matrix
sy.pprint(symbol_hamiltonian)
sy.pprint(X)
sy.pprint(D)

#Generating peaks
w, d = 10, 10

J  = [0]

def eigen(w,d,J):
  eigen1 = J/4 + w
  eigen2 = -J/4 + np.sqrt(J**2+d**2)/2
  eigen3 = -J/4 - np.sqrt(J**2+d**2)/2
  eigen4 = J/4 - w
  eigenvalues = [eigen1,eigen2,eigen3,eigen4]
  return eigenvalues

for index,each in enumerate(eigenvals_0):
  print("State", 4-index, "has a frequency of", each)

for each in J:  
  plt.bar(eigen(w,d,each),1,width=0.7,label=each)
plt.legend()
plt.yticks([])
plt.ylim(0, 1.5)  
plt.xlabel("Energy / Natural units")
plt.savefig("bars")
plt.show() 
